#!/usr/bin/python
# coding: utf-8

# avc - Archlinux Version Checker
# Copyright © 2012 Sébastien Luttringer
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

from abs.config import BaseConfigFile
from abs.controller import VersionController
import abs
import abs.error
import argparse
import logging

def parse_argv():
    '''Parse command line arguments'''
    parser = argparse.ArgumentParser()
    parser.add_argument("--version", action="version",
                        version="avc version %s" % abs.version)
    parser.add_argument("-d", "--debug", action="store_true",
        help="debug mode")
    parser.add_argument("-D", "--diff", action="store_true",
        help="display only different version")
    parser.add_argument("-l", "--list", action="store_true",
        help="list registered packages")
    parser.add_argument("-p", "--packages", nargs='+', default=None,
        help="only check listed packages")
    parser.add_argument("-S", "--no-save", action="store_true",
        help="doesn't save polling result")
    parser.add_argument("-b", "--database", default=None,
        help="database file with saved polling")
    parser.add_argument("-c", "--config", default=None,
        help="config file with url to check")
    return parser.parse_args()

def main():
    '''Program entry point'''
    # parse command line
    args = parse_argv()
    # set global debug mode
    if args.debug:
        logging.getLogger().setLevel(logging.DEBUG)
    # Load configuration
    try:
        packages = BaseConfigFile(args.config, "avc.conf").config
    except abs.error.MissingConfigFile:
        logging.error("Configuration file is missing. "
                      "Please create it before")
        exit(abs.error.ERR_FATAL)
    # filter packages
    if args.packages is not None:
        for pkg in list(packages):
            if pkg not in args.packages:
                del packages[pkg]
    # Load package checking object
    soft = VersionController(packages)
    if args.list == True:
        soft.print_names()
    else:
        soft.print_versions(only_diff=args.diff)
    if not args.no_save:
        soft.save(args.database)
    return True

if __name__ == '__main__':
    main()

# vim:set ts=4 sw=4 et ai:
